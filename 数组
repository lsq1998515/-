//查找最大子数组
//#define _CRT_SECURE_NO_WARNINGS 1
//#include <stdio.h>
//#include <stdlib.h>
//
////动态规划
//int FindMaxSonArr3(int *arr, int len)
//{
//	int i = 0;
//	int sum = arr[0];
//	int max = arr[0];
//	for (i = 1; i < len-1 ; i++)
//	{
//		if ( sum+arr[i]<arr[i])
//		{
//			sum=arr[i];
//		}
//		else
//		{
//			sum = sum + arr[i];
//		}
//		if (sum>=max)
//		{
//			max = sum;
//		}
//	}
//	return sum;
//}
//
////如果一个数字累加arr[i], 加之前arr[i]是一个负数，则累加和肯定是小于arr[i]的。
////如果一个数字累加arr[i], 加之前arr[i]是一个正数，则累加和肯定是大于arr[i]的。
//int FindMaxSonArr2(int *arr, int len)
//{
//	int sum = arr[0];
//	int i = 1;
//	int max = arr[0];
//	for (i = 1; i < len-1;i++)
//	{
//		if (sum<0)
//		{
//			sum=arr[i];
//		}
//		else
//		{
//			sum=sum+arr[i];
//		}
//	}
//	if (sum>max)
//	{
//		max = sum;
//	}
//	return max;
//}
//
//
//int  FindMaxSonArr1(int *arr, int len)
//{
//	int i = 0;
//	int j = 0;
//	int sum = 0;
//	int Max = arr[0];
//	for (i = 1; i < len; i++)
//	{
//		sum = 0;
//		for (j = i; j < len;j++)
//		{
//			sum = sum + arr[j];
//			if (sum>Max)
//			{
//				Max = sum;
//			}
//		}
//	}
//	return Max;
//}
//
//
//int main()
//{
//	int arr[] = { 1, -2, 3, 10, -4, 7, 2, -5 };
//	int len = sizeof(arr) / sizeof(arr[0]);
//	printf("%d\n", FindMaxSonArr1(arr, len)); //暴力算法 时间复杂度O(n*n)
//	printf("%d\n", FindMaxSonArr2(arr, len)); //时间复杂度为O(n)
//	printf("%d\n", FindMaxSonArr3(arr, len)); //动态规划
//	system("pause");
//	return 0;
//}

//查找数组中数字出现次数超过数组长度一半的数字
//#define _CRT_SECURE_NO_WARNINGS 1
//#include <stdio.h>
//#include <stdlib.h> 
//int  qort(int arr[], int left, int right)
//{
//	int tmp = arr[left];
//	while (left < right)
//	{
//		while (left < right && arr[right] >= tmp)
//		{
//			right--;
//		}
//		if (arr[right] < tmp)
//		{
//			arr[left] = arr[right];
//			arr[right] = tmp;
//		}
//		else
//		{
//			break;
//		}
//		while (left<right && arr[left] <= tmp)
//		{
//			left++;
//		}
//		if (arr[left]>tmp)
//		{
//			arr[right] = arr[left];
//			arr[left] = tmp;
//		}
//		else
//		{
//			break;
//		}
//	}
//	return right;
//}
//
//int CheckNum(int *arr, int len, int val)
//{
//	int cout = 0;
//	int i = 0;
//	for (i = 0; i < len; i++)
//	{
//		if (arr[i] == val)
//		{
//			cout++;
//		}
//	}
//	if (cout > len/2)
//	{
//		return 1;
//	}
//	return 0;
//}
//
//int  SelectHalfNum(int *arr, int len)
//{
//	int left = 0;
//	int right = len - 1;
//	int tem = qort(arr, left, right);
//	int middle = len / 2;
//	while (tem != middle)
//	{
//		if (tem > middle)
//		{
//			right = tem - 1;
//			tem = qort(arr, left, right);
//		}
//		else
//		{
//			left = tem + 1;
//			tem = qort(arr, left, right);
//		}
//	}
//	int ret = arr[middle]; 
//	if (CheckNum(arr,len,ret)!=0)
//	{
//		return ret;
//	}
//	return 0;
//}
//
//int main()
//{
//	int arr[] = { 1, 2, 5, 2 };
//	int len = sizeof(arr) / sizeof(arr[0]);
//	printf("%d", SelectHalfNum(arr, len));
//	system("pause");
//	return 0;
//}
//
