//game.h
#define ROW 3
#define COL 3
#include<stdio.h>
#include<time.h>
#include<string.h>
#include<stdlib.h>
void init_board(char arr[ROW][COL], int row, int col);
void display_board(char arr[ROW][COL], int row, int col);
void player_move(char arr[ROW][COL], int row, int col);
void computer_move(char arr[ROW][COL], int row, int col);
char Iswin(char arr[ROW][COL], int row, int col);



//game.c
#define _CRT_SECURE_NO_WARNINGS
#include"game.h"

void init_board(char arr[ROW][COL], int row, int col)//实现数组的初始化
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			arr[i][j] = ' ';
		}
	}
}
void display_board(char arr[ROW][COL], int row, int col)//打印棋盘函数
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		int j = 0;
		for (j = 0; j < col; j++)
		{
			printf(" %c ", arr[i][j]);
			if (j < col - 1)
				printf("|");
		}
		printf("\n");
		if (i < row - 1)
		{
			for (j = 0; j < col; j++)
			{
				printf("---");
				if (j < col - 1)
					printf("|");
			}
		}
		printf("\n");
	}
}

void player_move(char arr[ROW][COL], int row, int col)//玩家下棋
{
	int x = 0;
	int y = 0;
	printf("玩家走\n");
	while (1)
	{
		printf("请输入坐标：\n");
		scanf("%d %d", &x, &y);
		if ((x >= 1 && x <= row) && (y >= 1 && y <= col))
		{
			if (arr[x - 1][y - 1] == ' ')
			{
				arr[x - 1][y - 1] = 'x';
				break;
			}
			else
			{
				printf("该坐标已被占用\n");
			}
		}
		else
		{
			printf("坐标非法\n");
		}
	}


}

void computer_move(char arr[ROW][COL], int row, int col)//电脑下棋（在这里是通过生成一个随机的二维坐标）
{
	int x = 0;
	int y = 0;
	printf("电脑走：\n");
	while (1)
	{
		x = rand() % 3;
		y = rand() % 3;
		if (arr[x][y] == ' ')
		{
			arr[x][y] = '0';
			break;
		}
	}
}

int Isfull(char arr[ROW][COL], int row, int col)//判断二维数组arr[i][j]是否为' '，如果是，则返回0
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			if (arr[i][j] == ' ')
				return 0;
		}
	}
	return 1;

}

char Iswin(char arr[ROW][COL], int row, int col)//判断输赢的函数
{

	int i = 0;
	for (i = 0; i < row; i++)
	{
		if ((arr[i][0] == arr[i][1]) && (arr[i][2] == arr[i][1]) && (arr[0][i]) != ' ')
		{
			return arr[i][0];
		}
	}
	for (i = 0; i < col; i++)
	{
		if ((arr[0][i] == arr[1][i]) && (arr[1][i] == arr[2][i]) && (arr[i][0]) != ' ')
		{
			return arr[0][i];
		}
	}
	if (arr[0][0] == arr[1][1] && arr[1][1] == arr[2][2] && arr[2][2] != ' ')
	{
		return arr[1][1];
	}
	if (arr[2][0] == arr[1][1] && arr[1][1] == arr[0][2] && arr[0][2] != ' ')
	{
		return arr[1][1];
	}
	if (Isfull(arr, row, col))
	{
		return 'Q';
	}
	return ' ';
  
  
  
  //三子棋.c
#define _CRT_SECURE_NO_WARNINGS
#include"game.h"
void menu()
{
	printf("*********************************\n");
	printf("*************  1.play  **********\n");
	printf("*************  0.exit  **********\n");
	printf("*********************************\n");
}
void game()
{
	char arr[ROW][COL] = { 0 };
	char ret = 0;
	init_board(arr, ROW, COL);
	display_board(arr, ROW, COL);
	while (1)
	{
		player_move(arr, ROW, COL);
		ret = Iswin(arr, ROW, COL);
		if (ret != ' ')
		{
			break;
		}
		display_board(arr, ROW, COL);
		computer_move(arr, ROW, COL);
		ret = Iswin(arr, ROW, COL);
		if (ret != ' ')
		{
			break;
		}
		display_board(arr, ROW, COL);
	}
	display_board(arr, ROW, COL);
	if (ret == 'x')
	{
		printf("玩家赢\n");
	}
	else if (ret == '0')
	{
		printf("电脑赢\n");
	}
	else if (ret == 'Q')
	{
		printf("平局\n");
	}
}
void test()
{
	int input = 0;
	srand((unsigned int)time(NULL));
	do
	{
		printf("请输入你的选择（0/1）：\n");
		scanf("%d", &input);
		switch (input)
		{
		case 1:
			game();
			break;
		case 0:
			printf("退出游戏\n");
			break;
		default:
			printf("输入错误，请重新输入：\n");
			break;
		}
	} while (input);
}
int main()
{
	menu();
	test();
	system("pause");
	return 0;
}
