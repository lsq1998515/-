//NoHeadSeqList.h

#pragma once
#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <assert.h>

typedef int SLTDataType;
typedef struct SListNode
{
	SLTDataType _date;
	struct SListNode* _next;
}SListNode;

typedef struct SList
{
	SListNode* _head;
}SList;

//初始化
void SListInit(SList* plist);

//销毁
void SListDestroy(SList* plist);

//创建结点
SListNode* BuyListNode(SLTDataType x);

//头插
void SListPushFront(SList* plist, SLTDataType x);

//头删
void SListPopFront( SList* plist);

//尾插
void SListPushBack(SList* plist, SLTDataType x);

//尾删
void SListPopBack(SList* plist);

//查找值为x的结点
SListNode* SListFind(SList* plist, SLTDataType x);

// 在pos的后面进行插入
void SListInsertAfter(SListNode* pos, SLTDataType x);


// 删除POS后面的第一个结点
void SListEraseAfter(SListNode* pos);

//移除值为x的结点
void SListRemove(SList* plist, SLTDataType x);

//打印
void SListPrint(SList* plist);

//NoHeadSeqList.c
#define _CRT_SECURE_NO_WARNINGS 1
#include "NoHeadSeqList.h"
//初始化
void SListInit(SList* plist)
{
	assert(plist);
	plist->_head = NULL;
}

//销毁
void SListDestroy(SList* plist)
{
	assert(plist);
	SListNode* p;
	SListNode* q;
	p= plist->_head;
	while (p)
	{
		q = p->_next;
		free(p);
		p = q;
	}
	plist->_head = NULL;
}

//建立结点
SListNode* BuyListNode(SLTDataType x)
{
	SListNode* plist = (SListNode*)malloc(sizeof(SListNode));
	plist->_date = x;
	plist->_next = NULL;
	return plist;
}

//头插
void SListPushFront(SList* plist, SLTDataType x)
{
	assert(plist);
	SListNode* pnode = BuyListNode(x);
	assert(pnode);
	pnode->_next = plist->_head;
	plist->_head = pnode;
}

//头删
void SListPopFront(SList* plist)
{
	assert(plist!=NULL);
	assert(plist->_head != NULL);
	SListNode* pnode = plist->_head;
	plist->_head = pnode->_next;
	free(pnode);
}

//尾插
void SListPushBack(SList* plist, SLTDataType x)
{
	assert(plist);
	if (plist->_head==NULL)
	{
		SListPushFront(plist,x);
		return;
	}
	SListNode* pnode = BuyListNode(x);
	assert(pnode);
	SListNode* tmp = plist->_head;
	while (tmp->_next)
	{
		tmp = tmp->_next;
	}
	tmp->_next = pnode;
}

//尾删
void SListPopBack(SList* plist)
{
	assert(plist);
	assert(plist->_head);
	SListNode* pnode = plist->_head;
	if (pnode->_next==NULL)
	{
		SListPopFront(plist);
		return;
	}
	assert(pnode);
	SListNode* ret = plist->_head;
	while (ret->_next)
	{
		pnode = ret;
		ret = ret->_next;
	}
	free(ret);
	pnode->_next = NULL;
}

//查找值为x的结点
SListNode* SListFind(SList* plist, SLTDataType x)
{
	assert(plist);
	assert(plist->_head);
	SListNode* pnode = plist->_head;
	while (pnode)
	{
		if (pnode->_date==x)
		{
			return pnode;
		}
		pnode = pnode->_next;
	}
	return NULL;
}

// 在pos的后面进行插入
void SListInsertAfter(SListNode* pos, SLTDataType x)
{
	SListNode*pnode = BuyListNode(x);
    pnode->_next=pos->_next;
	pos->_next = pnode;
}

//删除POS位后面的第一个结点
void SListEraseAfter(SListNode* pos)
{
	SListNode* pnode = pos->_next;
	pos->_next = pnode->_next;
	free(pnode);
}

//移除值为x的结点
void SListRemove(SList* plist, SLTDataType x)
{
	assert(plist);
	while (plist->_head != NULL && plist->_head->_date == x)
	{
		SListPopFront(plist);
	}
	SListNode* prev = plist->_head;
	SListNode* cur = plist->_head->_next;
	for (; cur != NULL; cur = prev->_next)
	{
		if (cur->_date ==x)
		{
			prev->_next = cur->_next;
			free(cur);
		}
		else
		{
			prev = cur;
		}
	}
}

//打印
void SListPrint(SList* plist)
{
	assert(plist);
	SListNode* tmp = plist->_head;
	while (tmp)
	{
		printf("%d ", tmp->_date);
		tmp = tmp->_next;
	}
}
//NoHeadTest.c
#define _CRT_SECURE_NO_WARNINGS 1
#include "NoHeadSeqList.h"
int main()
{
	SList plist;
	SListInit(&plist);
	SListPushFront(&plist, 2);
	SListPushFront(&plist, 5);
	SListPushFront(&plist, 1);
	SListPushFront(&plist, 9);
	SListPushFront(&plist, 15);
	SListPushBack(&plist, 8);  //15 9 1 5 2 8
	SListRemove(&plist, 5);    //15 9 1 2 8
	//SListPrint(&plist);
	//SListPopFront(&plist);
	//SListPopBack(&plist);
	//SListPopBack(&plist);
	//SListPopBack(&plist);
	//SListPrint(&plist);
	SListNode* pos = SListFind(&plist, 2);
	SListEraseAfter(pos);      // 15 9  1  2
	SListInsertAfter(pos, 12); // 15 9  1  2  12
	SListPrint(&plist);
  SListDestroy(&plist);
	system("pause");
	return 0;
}
