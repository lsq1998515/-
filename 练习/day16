/*
题目描述
完全数（Perfect number），又称完美数或完备数，是一些特殊的自然数。

它所有的真因子（即除了自身以外的约数）的和（即因子函数），恰好等于它本身。

例如：28，它有约数1、2、4、7、14、28，除去它本身28外，其余5个数相加，1+2+4+7+14=28。

给定函数count(int n),用于计算n以内(含n)完全数的个数。计算范围, 0 < n <= 500000

返回n以内完全数的个数。 异常情况返回-1

 

/**

 * 

 *  完全数（Perfect number），又称完美数或完备数，是一些特殊的自然数。

 *  它所有的真因子（即除了自身以外的约数）的和（即因子函数），恰好等于它本身。

 *  例如：28，它有约数1、2、4、7、14、28，除去它本身28外，其余5个数相加，1+2+4+7+14=28。

 * 

 *  给定函数count(int n),用于计算n以内(含n)完全数的个数

 * @param n  计算范围, 0 < n <= 500000

 * @return n 以内完全数的个数, 异常情况返回-1

 * 

 */    

public   static   int  count( int  n)

 

 

输入描述:
输入一个数字

输出描述:
输出完全数的个数

示例1
输入

1000
输出

3
*/

/*
【解题思路】：
本题可以通过遍历每一个约数，求和，判断完全数。约数计算可以遍历sqrt(n)的范围。
*/

//第一种
#include<iostream>
#include<algorithm>
using namespace std;
int count(int n) {
int cnt = 0;
if ((n < 0) | (n>500000))
return -1;
else {
for (int i = 2; i <= n; i++) {
int sum = 0;
//遍历范围
int sq = sqrt(i);
for (int j = 2; j <= sq; j++) {
if (i%j == 0) {
//如果j^2 = i，说明两个约数相同，只加一个
if (i / j == j)
sum += j;
else
//否则，两个不同的约数都要相加
sum += j + (i / j);
}
}
if (sum + 1 == i)
cnt++;
}
return cnt;
}
}
int main() {
int input;
while(cin >> input)
cout << count(input) << endl;
return 0;
}

//第二种:
#include<iostream>
#include<math.h>
  
using namespace std;
  
bool isperfect(int num){
    if(num==1) return false;
    int thresh=(int)sqrt((double)num);
    int sum=1;
    for(int i=2;i<=thresh;i++){
        if(num%i==0){
            sum+=i;
            sum+=num/i;
            if(sum>num) return false;
        }
    }
    if(sum==num) return true;
    else return false;
}
  
int main(){
    int n;
    while(cin>>n){
        int ans=0;
        for(int i=1;i<=n;i++){
            if(isperfect(i)) ans++;
        }
        cout<<ans<<endl;
    }
      
    return 0;
}

/*
题目描述
扑克牌游戏大家应该都比较熟悉了，一副牌由54张组成，含3~A，2各4张，小王1张，大王1张。牌面从小到大用如下字符和字符串表示（其中，小写joker表示小王，大写JOKER表示大王）:)
3 4 5 6 7 8 9 10 J Q K A 2 joker JOKER
输入两手牌，两手牌之间用“-”连接，每手牌的每张牌以空格分隔，“-”两边没有空格，如：4 4 4 4-joker JOKER
请比较两手牌大小，输出较大的牌，如果不存在比较关系则输出ERROR

基本规则：
（1）输入每手牌可能是个子，对子，顺子（连续5张），三个，炸弹（四个）和对王中的一种，不存在其他情况，由输入保证两手牌都是合法的，顺子已经从小到大排列；
（2）除了炸弹和对王可以和所有牌比较之外，其他类型的牌只能跟相同类型的存在比较关系（如，对子跟对子比较，三个跟三个比较），不考虑拆牌情况（如：将对子拆分成个子）
（3）大小规则跟大家平时了解的常见规则相同，个子，对子，三个比较牌面大小；顺子比较最小牌大小；炸弹大于前面所有的牌，炸弹之间比较牌面大小；对王是最大的牌；
（4）输入的两手牌不会出现相等的情况。

答案提示：
（1）除了炸弹和对王之外，其他必须同类型比较。
（2）输入已经保证合法性，不用检查输入是否是合法的牌。
（3）输入的顺子已经经过从小到大排序，因此不用再排序了.
输入描述:
输入两手牌，两手牌之间用“-”连接，每手牌的每张牌以空格分隔，“-”两边没有空格，如4 4 4 4-joker JOKER。
输出描述:
输出两手牌中较大的那手，不含连接符，扑克牌顺序不变，仍以空格隔开；如果不存在比较关系则输出ERROR。
示例1
输入

4 4 4 4-joker JOKER
输出

joker JOKER
*/

/*
【题目解析】：
本题的题目意思是输入的只是这些类型中的一种，个子，对子，顺子（连续5张），三个，炸弹（四个）和对
王。其实就是最多5张牌（顺子），最少1一张牌之间的比较。不存在其他情况。
【解题思路】：
由输入保证两手牌都是合法的，顺子已经从小到大排列，按照题意牌面类型的确定和大小的比较直接可以转
换为牌个数的比较
*/

//第一种
#include <iostream>
#include <string>
#include <algorithm>
using namespace std;
int main(){
string line;
while (getline(cin, line)){
//王炸最大，直接输出
if (line.find("joker JOKER") != -1)
cout << "joker JOKER" << endl;
else{
int dash = line.find('-');
//分开两手牌
string car1 = line.substr(0, dash);
string car2 = line.substr(dash + 1);
//获取空格的次数，牌数为c + 1
int c1 = count(car1.begin(), car1.end(), ' ');
int c2 = count(car2.begin(), car2.end(), ' ');
//拿到第一张牌
string first1 = car1.substr(0, car1.find(' '));
string first2 = car2.substr(0, car2.find(' '));
string str = "345678910JQKA2jokerJOKER";
if (c1 == c2){
//只要牌数相等，则第一张牌大的即为大
if (str.find(first1) > str.find(first2))
cout << car1 << endl;
else
cout << car2 << endl;
}
else
{
//牌数不相同，说明类型不同,只有炸弹可以和其它牌比较
//其它类型都是错误的
if (c1 == 3)
cout << car1 << endl;
else if (c2 == 3)
cout << car2 << endl;
else
cout << "ERROR" << endl;
}
}
}
}

//第二种:
#include <iostream>
#include <string.h>
#include <stdio.h>
 
using namespace std;
 
int strToNumber(char *input,int *num,int start,int end){
    int index = 0;
    for(int i=start;i<end;i++){
        if(input[i] >= '3' && input[i] <= '9'){
            num[index++] = input[i] - '0';
        }
        else if(input[i] == 'J'){
            if(i+1<end){
                if(input[i+1] != 'O'){
                    num[index++] = 11;
                }
                else{
                    num[index++] = 17;
                    i += 4;
                }
            }
            else
                num[index++] = 11;
        }
        else if(input[i] == '1'){
            num[index++] = 10;
            i++;
        }
        else if(input[i]=='Q'){
            num[index++] = 12;
        }
        else if(input[i] == 'K'){
            num[index++] = 13;
        }
        else if(input[i] == 'A'){
            num[index++] = 14;
        }
        else if(input[i] == '2'){
            num[index++] = 15;
        }
        else if(input[i] == 'j'){
            num[index++] = 16;
            i += 4;
        }
    }
    if(index == 1){  //个子
        return 1;
    }
    else if(index == 2){ //对子
        if(num[0] == num[1]){
            return 2;
        }
        if((num[0]+num[1]) == 33){  //王炸
            return 6;
        }
    }
    else if(index == 3){ //飞机
        return 3;
    }
    else if(index == 5){  //顺子
        return 4;
    }
    else if(index == 4){ //炸弹
        return 5;
    }
    return -1;
}
 
int main()
{
    char input[100],str1[50],str2[50];
    while(gets(input)){
        int len = strlen(input);
        int j=0,index = 0;
        int num1[5],num2[5];
        for(int i=0;i<5;i++){
            num1[i] = -1;
            num2[i] = -1;
        }
        for(;j<len;j++){
            if(input[j] == '-'){
                break;
            }
            str1[j] = input[j];
        }
        str1[j] = '\0';
        index = j;
        j++;
        for(;j<len;j++){
            str2[j-index-1] = input[j];
        }
        str2[j-index-1] = '\0';
 
        int type1 = strToNumber(input,num1,0,index);
        int type2 = strToNumber(input,num2,index+1,len);
 
        if(type1 == 6){
            cout<<str1<<endl;
        }
        else if(type2 == 6){
            cout<<str2<<endl;
        }
        else if(type1 == type2){
            if(num1[0] < num2[0]){
                cout<<str2<<endl;
            }
            else if(num1[0] > num2[0]){
                cout<<str1<<endl;
            }
        }
        else if(type1 == 5 && type2 < 5){
            cout<<str1<<endl;
        }
        else if(type2 == 5 && type1 < 5){
            cout<<str2<<endl;
        }
        else
            cout<<"ERROR"<<endl;
    }
     
    return 0;
}
