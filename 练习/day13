/*
题目描述
根据输入的日期，计算是这一年的第几天。。

详细描述：

输入某年某月某日，判断这一天是这一年的第几天？。

 

 

接口设计及说明：

 /*****************************************************************************
 Description   : 数据转换
 Input Param   : year 输入年份
                Month 输入月份
                Day 输入天
                    
 Output Param  :
 Return Value  : 成功返回0，失败返回-1（如：数据错误）
 *****************************************************************************/
 public static int iConverDateToDay(int year, int month, int day)
 {
     /* 在这里实现功能，将结果填入输入数组中*/ 
     return 0;
 }
 
 /*****************************************************************************
 Description   : 
 Input Param   :
                    
 Output Param  :
 Return Value  : 成功:返回outDay输出计算后的第几天;
                                           失败:返回-1
 *****************************************************************************/
 public static int getOutDay()
 {
  return 0;
 }

//代码
 #include<iostream>
using namespace std;
int main()
{
	int year, month, day;
	while (1)
	{
		cin >> year >> month >> day;
		if (!cin)
			break;
		int arr[] = { 0,31, 28, 31, 30,  31, 30, 31, 31, 30, 31, 30, 31 };
		int sum = 0;
		for (int i = 1; i <=month - 1; i++)
		{
			sum += arr[i];
		}
        sum+=day;
        if(month>2)
        {
            if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0))
			sum ++;
        }
		cout << sum << endl;
    }
	return 0;
}

 

 

 

输入描述:
输入三行，分别是年，月，日

输出描述:
成功:返回outDay输出计算后的第几天;
                                           失败:返回-1

示例1
输入
复制
2012

12

31
输出
复制
366
*/


/*
题目描述
在命令行输入如下命令：

xcopy /s c:\ d:\，

各个参数如下： 

参数1：命令字xcopy 

参数2：字符串/s

参数3：字符串c:\

参数4: 字符串d:\

请编写一个参数解析程序，实现将命令行各个参数解析出来。

 

解析规则： 

1.参数分隔符为空格 
2.对于用“”包含起来的参数，如果中间有空格，不能解析为多个参数。比如在命令行输入xcopy /s “C:\program files” “d:\”时，参数仍然是4个，第3个参数应该是字符串C:\program files，而不是C:\program，注意输出参数时，需要将“”去掉，引号不存在嵌套情况。
3.参数不定长 
4.输入由用例保证，不会出现不符合要求的输入 
 

 

输入描述:
输入一行字符串，可以有空格

输出描述:
输出参数个数，分解后的参数，每个参数都独占一行

示例1
输入

xcopy /s c:\\ d:\\
输出

4
xcopy
/s
c:\\
d:\\


*/

/*
【解题思路】：
用一个数组存放每月的累积天数 输入的日期天数= 当月的天数 + 当月之前的累积天数 如果包含二月，再去判
断是否为闰年，如果是闰年，再加1天即可
*/
//代码
#include<iostream>
#include<string>
using namespace std;
int main()
{
    string str;
    while(getline(cin,str))
    {
        int count = 0;
        //首先计算参数的数量
        for(size_t i = 0; i < str.size(); i++)
        {
            if(str[i] == ' ')
                count++;
            if(str[i] == '"')
            {
                do
                {
                    i++;
                }while(str[i] != '"');
            }
        }
        // 空格数目 + 1 = 参数数目
        cout << count + 1 << endl;
        //进行分割输出
        int flag = 1;//双引号里面的括号 flag = 0 双引号外面的引号 flag = 1
        for(size_t i = 0; i < str.size(); i++)
        {
            //有双引号,flag通过异或变为0 下一次碰见双引号 flag置1
            if(str[i] == '"')
                flag ^= 1;
            //双引号和普通空格不打印
            if(str[i] != ' ' && str[i] != '"')
                cout<<str[i];
            //双引号中的空格要打印
            if(str[i] == ' ' && (flag == 0))
                cout << str[i] << endl;
            //遇到双引号之外的空格就换行
            if(str[i] == ' ' && flag == 1 )
                cout << endl;
        }
        cout<<endl;
    }
    return 0;
}

#include <iostream>
using namespace std;
int main()
{
int array[12] = {31,59, 90, 120, 151, 181, 212,
243, 273, 304, 334, 365};
int year;
int month;
int day;
int sum = 0;
while(cin >> year >> month >> day)
{
sum = 0;
sum += array[month - 2];
sum += day;
if(month > 2)
{
if((year % 4 == 0 && year % 100 != 0)
|| year % 400 == 0)
{
sum += 1;
}
}
cout << sum <<endl;
}
}


/*
题目描述
一个袋子里面有n个球，每个球上面都有一个号码(拥有相同号码的球是无区别的)。如果一个袋子是幸运的当且仅当所有球的号码的和大于所有球的号码的积。
例如：如果袋子里面的球的号码是{1, 1, 2, 3}，这个袋子就是幸运的，因为1 + 1 + 2 + 3 > 1 * 1 * 2 * 3
你可以适当从袋子里移除一些球(可以移除0个,但是别移除完)，要使移除后的袋子是幸运的。现在让你编程计算一下你可以获得的多少种不同的幸运的袋子。
输入描述:
第一行输入一个正整数n(n ≤ 1000)
第二行为n个数正整数xi(xi ≤ 1000)
输出描述:
输出可以产生的幸运的袋子数
示例1
输入

3
1 1 1
输出

2

*/

/*
【解题思路】：
每次从全集中选择若干元素（小球）组成子集（袋子）。对于任意两个正整数a,b如果满足 a+b>ab，则必有
一个数为1.可用数论证明：设a=1+x,b=1+y，则1+x+1+y>(1+x)(1+y)，---> 1>xy，则x，y必有一个为0，即a,b
有一个为1.推广到任意k个正整数，假设a1,a2,...ak，如果不满足给定条件，即和sum小于等于积pi。如果此时
再选择一个数b,能使其满足sum+b > pib，则，b必然为1，且为必要非充分条件。反之，如果选择的b>1，则
sum+b <= pi*b，即a1,a2,...,ak,b不满足给定条件。
因此，将球按标号升序排序。每次从小到大选择，当选择到a1,a2,...,ak-1时满足给定条件，而再增加选择ak
时不满足条件（ak必然大于等于max(a1,a2,...,ak-1)），继续向后选择更大的数，必然无法满足！此时不必再
继续向后搜索。如果有多个1，即当k=1时，sum(1)>pi(1)不满足，但下一个元素仍为1，则可以满足
1+1>1*1， 所以要判断当前ak是否等于1，如果等于1，虽然不能满足，组合的个数不能增加，但是继续向后
搜索，仍然有满足条件的可能.对于重复数字，组合只能算一个，要去重。
*/


//daim
#include<iostream>
#include<algorithm>
using namespace std;
/*
getLuckyPacket:从当前位置开始搜索符合要求的组合，一直搜索到最后一个位置结束
x[]: 袋子中的所有球
n: 球的总数
pos: 当前搜索的位置
sum: 到目前位置的累加和
multi: 到目前位置的累积值
*/
int getLuckyPacket(int x[], int n, int pos, int sum, int multi)
{
int count = 0;
//循环，搜索以位置i开始所有可能的组合
for (int i = pos; i<n; i++)
{
sum += x[i];
multi *= x[i];
if (sum > multi)
{
//找到符合要求的组合，加1，继续累加后续的值，看是否有符合要求的集合
count += 1 + getLuckyPacket(x, n, i + 1, sum, multi);
}
else if (x[i] == 1)
{
//如何不符合要求，且当前元素值为1，则继续向后搜索
count += getLuckyPacket(x, n, i + 1, sum, multi);
}
else
{
//如何sum大于multi,则后面就没有符合要求的组合了
break;
}
//要搜索下一个位置之前，首先恢复sum和multi
sum -= x[i];
multi /= x[i];
//数字相同的球，没有什么区别，都只能算一个组合，所以直接跳过
while (i < n - 1 && x[i] == x[i + 1])
{
i++;
}
}
return count;
}
int main()
{
int n;
while (cin >> n)
{
int x[n];
for (int i = 0; i < n; i++)
{
cin >> x[i];
}
sort(x, x + n);
//从第一个位置开始搜索
cout << getLuckyPacket(x, n, 0, 0, 1) << endl;
}
return 0;
}
