/*
题目描述
请编写一个函数，将两个数字相加。不得使用+或其他算数运算符。

给定两个int A和B。请返回A＋B的值

测试样例：
1,2
返回：3
*/

/*

【题目解析】
本题的意思是自己实现加法，不适用现成的运算符，考察大家对于运算符的灵活运用
【解题思路】：
本题可以通过位运算实现，具体实现如下：
1. 二进制位异或运算相当于对应位相加，不考虑进位
比如： 1 ^ 1 = 0 ---> 1 + 1 = 0 (当前位值为0，进一位)
1 ^ 0 = 1 ---> 1 + 0 = 1 (当前位值为1)
0 ^ 0 = 0 ---> 0 + 0 = 0 (当前位值为0)
2. 二进制位与运算相当于对应位相加之后的进位
比如： 1 & 1 = 1 ---> 1 + 1 = 0 (当前位的值进一位)
1 & 0 = 0 ---> 1 + 0 = 1 (当前位的值不进位)
0 & 0 = 0 ---> 0 + 0 = 0 (当前位的值不进位)
3. 两个数相加：对应二进制位相加的结果 + 进位的结果
比如：3 + 2 --> 0011 + 0010 --> 0011 ^ 0010 + ((0011 & 0010) << 1)
---> (0011 ^ 0010) ^ ((0011 & 0010) << 1)， 当进位之后的结果为0时，相加结束

*/

class UnusualAdd {
public:
    int addAB(int A, int B) {
        // write code here
        //保存本位和
        int sum = 0;
        //保存进位
        int carry = 0;
        while(B != 0 )
        {
            //求对应位的和
            sum = A^B;
            //求进位
            carry = (A&B)<<1;
            A = sum;
            B = carry;
        }
        return sum;
    }
};


题目描述
请编写一个函数（允许增加子函数），计算n x m的棋盘格子（n为横向的格子数，m为竖向的格子数）沿着各自边缘线从左上角走到右下角，总共有多少种走法，要求不能走回头路，即：只能往右和往下走，不能往左和往上走。
输入描述:
输入两个正整数

输出描述:
返回结果

示例1
输入

2
2
输出

6
/*
【解题思路】：
| 1 | 2 | 3 |
-------------
| 4 | 5 | 6 |
-------------
| 7 | 8 | 9 |
-------------
1. 对于上面的n*m(3*3)的格子，有两种情况
a. 如果n或者m为1，则只有一行或者一列，从左上角走到右下角的路径数为n + m
比如： 1 * 1格子，可以先向下走，再向右走，到达右下角；或者先向右走，
再向下走，到达右下角，共两条，即 1 + 1 = 2，对于1 * m和 n * m的
情况同学们自己画一下
b. 如果n,m都大于1，那么走到[n][m]格子的右下角只有两条路径，
<1>: 从[n - 1][m]格子的右下角向下走，到达
<2>: 从[n][m - 1]格子的右下角向右走，到达
所以走到[n][m]格子的右下角的数量为[n-1][m] + [n][m - 1],可以通过递归实现，情况a为
递归的终止条件。
*/


#include<iostream>
using namespace std;
int pathNum(int n,int m)
{
if(n > 1 && m > 1)
//b情况，递归
return pathNum(n-1,m) + pathNum(n,m-1);
else if(((n >= 1)&&(m == 1))||((n == 1)&&(m >= 1)))
// a情况，终止条件
return n + m;
else
//格子为0时， 路径为0
return 0;
}
int main()
{
int n,m;
while(cin>>n>>m)
{
cout<<pathNum(n,m)<<endl;
}
return 0;
}
