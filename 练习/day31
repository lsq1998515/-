/*
1. 标题：字符集合 | 时间限制：1秒 | 内存限制：32768K
输入一个字符串，求出该字符串包含的字符集合
输入描述：
每组数据输入一个字符串，字符串最大长度为100，且只包含字母，不可能为空串，区分大小写。
输出描述：
每组数据一行，按字符串原有的字符顺序，输出字符集合，即重复出现并靠后的字母不输出。
示例1:
输入
abcqweracb
输出
abcqwer
*/


#include <iostream>
#include <unordered_set>
#include <string>
using namespace std;
int main()
{
string s;
string ret;
unordered_set<char> uSet;
while(cin>>s)
{
ret.clear();
uSet.clear();
for(const auto& ch : s)
{
if(uSet.count(ch) == 0)
{
uSet.insert(ch);
ret += ch;
}
}
cout<<ret<<endl;
}
return 0;
}


/*
2. 标题：元素查找 | 时间限制：3秒 | 内存限制：32768K | 语言限制：[Python, C++, C#, Java]
有一个排过序的数组，包含n个整数，但是这个数组向左进行了一定长度的移位，例如，原数组为
[1,2,3,4,5,6]，向左移位5个位置即变成了[6,1,2,3,4,5],现在对于移位后的数组，需要查找某个元素的位置。请
设计一个复杂度为log级别的算法完成这个任务。
给定一个int数组A，为移位后的数组，同时给定数组大小n和需要查找的元素的值x，请返回x的位置(位置从零
开始)。保证数组中元素互异。
测试样例：
[6,1,2,3,4,5],6,6
返回：0
*/


//由于移位了，但移位之后，中间元素的左右两边必定有一边是升序的
class Finder {
public:
//这道题目说了没有重复元素，因此没有考虑两边都需要搜索的情况
int findElement(vector<int> A, int n, int x) {
// write code here
if(A.size() <= 0 || n <= 0)
return -1;
return findElement(A,0,n-1,x);
}
int findElement(vector<int>& a,int begin, int end,int x)
{
if(begin > end)
return -1;
while(begin <= end)
{
int mid = (begin + end) / 2;
if(a[mid] == x)
return mid;
else if(a[begin] < a[mid])//左半边正常排序
{
if(a[begin] <= x && x <= a[mid])
end = mid - 1;
else
begin = mid + 1;
}else if(a[mid] < a[end])//右半边正常排序
{
if(a[mid] <= x && x <= a[end])
begin = mid + 1;
else
end = mid - 1;
}
}
return -1;
}
};

