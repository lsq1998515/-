/*
题目描述
小Q得到一个神奇的数列: 1, 12, 123,...12345678910,1234567891011...。

并且小Q对于能否被3整除这个性质很感兴趣。

小Q现在希望你能帮他计算一下从数列的第l个到第r个(包含端点)有多少个数可以被3整除。

输入描述:
输入包括两个整数l和r(1 <= l <= r <= 1e9), 表示要求解的区间两端。
输出描述:
输出一个整数, 表示区间内能被3整除的数字个数。
示例1
输入
复制
2 5
输出
复制
3
说明
12, 123, 1234, 12345...
其中12, 123, 12345能被3整除。
*/

//代码:
#include <cstdio>
#include <algorithm>
#include <cmath>
 
using namespace std;
 
int main() {
    // freopen("data.in", "r", stdin);
    int l = -1, r = -1, cnt = 0, tot = 0, res = 0;
    scanf("%d%d", &l, &r);
    if (l == -1 || r == -1) {
        return 0;
    }
    for (int i = 1; i < l; i++) {
        cnt++;
        tot += cnt;
        tot %= 3;
        // printf("%d %d\n", cnt, tot);
    }
    for (int i = l; i <= r; i++) {
        cnt++;
        tot += cnt;
        tot %= 3;
        // printf("%d %d\n", cnt, tot);
        if (tot == 0) {
            res++;
        }
    }
    printf("%d\n", res);
    return 0;
}

/*
题目描述
给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出null。
*/

//代码:
/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) :
        val(x), next(NULL) {
    }
};
*/
class Solution {
public:
ListNode* MeetingNode(ListNode* pHead)
    {
        if (pHead == NULL)
            return NULL;
        ListNode *pSlow = pHead->next;
        if (pSlow == NULL)
            return NULL;
        ListNode* pFast = pSlow->next;
        while (pSlow != NULL && pFast != NULL)
        {
            if (pSlow == pFast)
                return pFast;
            pSlow = pSlow->next;
            pFast = pFast->next;
            if (pFast != NULL)
                pFast = pFast->next;
        }
        return NULL;
    }
    ListNode* EntryNodeOfLoop(ListNode* pHead)
    {
        if (pHead == NULL)
            return NULL;
        int nodesInLoop = 1;
        ListNode *meetingNode = MeetingNode(pHead);
        if (meetingNode == NULL)
            return NULL;
        ListNode* pNode1 = meetingNode;
        while (pNode1->next != meetingNode)
        {
            ++nodesInLoop;
            pNode1 = pNode1->next;
        }
        ListNode* pSlow = pHead;
        ListNode* pFast = pHead;
        while (nodesInLoop--)
            pFast = pFast->next;
        while (pSlow != pFast)
        {
            pSlow = pSlow->next;
            pFast = pFast->next;
        }
        return pFast;
    }
};
