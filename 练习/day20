/*
题目描述
写出一个程序，接受一个字符串，然后输出该字符串反转后的字符串。例如：
输入描述:
输入N个字符

输出描述:
输出该字符串反转后的字符串

示例1
输入

abcd
输出

dcba
*/

/*
【解题思路】：
字符串反转，需要交换首尾字符，设置首尾两个位置start，end，每次交换首尾字符，然后start++, end--，
直到start，end相遇，反转完成。
*/
#include<string>
#include<iostream>
using namespace std;
string reverseString(string s) {
if (s.empty())
return s;
size_t start = 0;
size_t end = s.size() - 1;
while (start < end)
{
swap(s[start], s[end]);
++start;
--end;
}
return s;
}
int main()
{
string s;
getline(cin,s);
cout<<reverseString(s)<<endl;
return 0;
}

/*
题目描述
题目标题：

计算两个字符串的最大公共字串的长度，字符不区分大小写

详细描述：

接口说明

原型：

int getCommonStrLength(char * pFirstStr, char * pSecondStr);

输入参数：

     char * pFirstStr //第一个字符串

     char * pSecondStr//第二个字符串
 

输入描述:
输入两个字符串

输出描述:
输出一个整数

示例1
输入

asdfas werasdfaswer
输出

6
*/

/*
【解题思路】：
求最大公共子串，使用递推实现 假设 x(i): 字符串第i个字符 y(j): 字符串第j个字符 dp[i][j]: 以x(i),y(j)结尾的最
大子串长度 比如：x: "abcde" y:"bcdae" dp[2][1]: 以x(2),y(1)结尾的最大子串长度 即：x遍历到"abc", y遍历
到"bc", 都以字符'c'结尾时最大公共子串为"bc" 故：当计算dp[i][j]时，首先看x(i),y(j)的值： （1）: x(i) == y(j)
当前两个字符串结尾的字符相等，dp[i][j] = dp[i-1][j-1] + 1 即个它的长度加1 （2）: x(i) != y(j) 当前两个字符
串结尾的字符不相等，说明没有以这连个字符结尾的公共子串 即dp[i][j] = 0 （3）: dp[0][j] 和 dp[i][0]表示以
某个子串的第一个字符结尾，最大长度为1 如果x(0) == y(j) 或者 x(i) == y(0), 则长度为1，否则为0 当dp中的
所有元素计算完之后，从中找打最大的值输出
*/
#include<iostream>
#include<vector>
using namespace std;
int main()
{
int max = 0; //max初值.
string str1, str2;
while (cin >> str1 >> str2)
{
int len1 = str1.size();
int len2 = str2.size();
int max = 0;
//所有值初始化为0
vector<vector<int>> dp(len1, vector<int>(len2, 0));
//计算dp
for (int i = 0; i < len1; i++)
{
for (int j = 0; j < len2; j++)
{
//如果当前结尾的字符相等，则在dp[i-1][j-1]的基础上加1
if (str1[i] == str2[j])
{
if (i >= 1 && j >= 1)
dp[i][j] = dp[i - 1][j - 1] + 1;
else
//dp[i][0] or dp[0][j]
dp[i][j] = 1;
}
//更新最大值
if (dp[i][j] > max)
max = dp[i][j];
}
}
cout << max << endl;
}
return 0;
}


/*

题目描述
MP3 Player因为屏幕较小，显示歌曲列表的时候每屏只能显示几首歌曲，用户要通过上下键才能浏览所有的歌曲。为了简化处理，假设每屏只能显示4首歌曲，光标初始的位置为第1首歌。

 

现在要实现通过上下键控制光标移动来浏览歌曲列表，控制逻辑如下：

歌曲总数<=4的时候，不需要翻页，只是挪动光标位置。

光标在第一首歌曲上时，按Up键光标挪到最后一首歌曲；光标在最后一首歌曲时，按Down键光标挪到第一首歌曲。



其他情况下用户按Up键，光标挪到上一首歌曲；用户按Down键，光标挪到下一首歌曲。



  2. 歌曲总数大于4的时候（以一共有10首歌为例）：

 

特殊翻页：屏幕显示的是第一页（即显示第1 – 4首）时，光标在第一首歌曲上，用户按Up键后，屏幕要显示最后一页（即显示第7-10首歌），同时光标放到最后一首歌上。同样的，屏幕显示最后一页时，光标在最后一首歌曲上，用户按Down键，屏幕要显示第一页，光标挪到第一首歌上。



一般翻页：屏幕显示的不是第一页时，光标在当前屏幕显示的第一首歌曲时，用户按Up键后，屏幕从当前歌曲的上一首开始显示，光标也挪到上一首歌曲。光标当前屏幕的最后一首歌时的Down键处理也类似。



其他情况，不用翻页，只是挪动光标就行。

 

输入描述:
输入说明：
1 输入歌曲数量
2 输入命令 U或者D

输出描述:
输出说明
1 输出当前列表
2 输出当前选中歌曲

示例1
输入
复制
10
UUUU
输出
复制
7 8 9 10
7
*/

/*
【题目解析】：
本题的意思是第一行输入歌曲数量，第二行输入指令，最后需要显式的输出也为两行，第一行为当前歌曲所
在的列表，第二行为光标所指向的歌曲。
【解题思路】：
本题比较简单，通过解析指令，进行移动即可，分两种情况，歌曲数目不大于4和大于4的情况。
*/

#include <iostream>
#include <string>
using namespace std;
int main(){
//歌曲数量
int n;
//命令
string order;
while (cin >> n >> order)
{
//将n首歌曲编号1：n , num为光标当前所在歌曲的编号,first为当前屏幕显示页的第一首歌曲的编号
int num = 1, first = 1;
if (n <= 4) //歌曲总数不超过4时，所有歌曲一页即可显示完，不需翻页，first始终不变
{
for (int i = 0; i < order.size(); i++)
{
if (num == 1 && order[i] == 'U')
num = n;
else if (num == n && order[i] == 'D')
num = 1;
else if (order[i] == 'U')
num--;
else
num++;
}
for (int i = 1; i <= n - 1; i++)
cout << i << ' ';
cout << n << endl;
cout << num << endl;
}
else //歌曲总数大于4时，显示完全所有歌曲需要翻页，屏幕总是显示4首歌曲
{
for (int i = 0; i < order.size(); i++)
{
if (first == 1 && num == 1 && order[i] == 'U')
{ first = n - 3; num = n; } //特殊翻页1
else if (first == n - 3 && num == n && order[i] == 'D')
{ first = 1; num = 1; } //特殊翻页2
else if (first != 1 && num == first && order[i] == 'U')
{ first--; num--; } //一般翻页1
else if (first != n - 3 && num == first + 3 && order[i] == 'D')
{ first++; num++; } //一般翻页2
else if (order[i] == 'U')
num--; //其他情况1
else
num++; //其他情况2
}
for (int i = first; i < first + 3; i++)
cout << i << ' ';
cout << first + 3 << endl;
cout << num << endl;
}
}
return 0;
}
