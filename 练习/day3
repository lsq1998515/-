//1.读入一个字符串str，输出字符串str中的连续最长的数字串
/*
输入描述:
个测试输入包含1个测试用例，一个字符串str，长度不超过255。
输出描述:
在一行内输出str中里连续最长的数字串。
示例1
输入
    abcd12345ed125ss123456789
输出
    123456789
*/


//代码:
#include<iostream>
using namespace std;
#include<string>
int main()
{
    string str;
    cin>> str;
    int pos=0;
    int max=0;
    int count=0;
    for(int i=0;i<str.size(); i++)
    {
        if(str[i]>='0' && str[i] <= '9')
        {
            count++;
            if(count>max)
            {
                max=count;
                pos=i;
            }
        }
        else
            count=0;
    }
    cout<<str.substr(pos-max+1,max)<<endl;
    return 0;
}
【解题思路】：
遍历字符串，使用cur去记录连续的数字串，如果遇到不是数字字符，则表示一个连续的数字串结束了，则将
数字串跟之前的数字串比较，如果更长，则更新更长的数字串更新到res。

//代码:
#include<iostream>
#include<string>
using namespace std;
int main()
{
	string str, res, cur;
	cin >> str;
	for (int i = 0; i <= str.length(); i++)
	{
		// 数字+=到cur
		if (str[i] >= '0' && str[i] <= '9')
		{
			cur += str[i];
		}
		else
		{
			// 找出更长的字符串，则更新字符串
			if (res.size() < cur.size())
				res = cur;
			else
				cur.clear();
		}
	}
	cout << res;
	return 0;
}


//2.数组中出现次数超过一半的数字
/*
数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。
由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。
*/

//代码
class Solution {
public:
    int MoreThanHalfNum_Solution(vector<int> numbers) {
        int max = 0;
        for(int i = 0; i < numbers.size(); i++)
        {
            if(numbers[i]>max)
                max=numbers[i];
        }
        vector<int> v;
        v.resize(max+1);
        for(int i = 0; i < numbers.size(); i++)
        {
            v[numbers[i]]++;
            if(v[numbers[i]] > numbers.size()/2)
                return numbers[i];
        }
        return 0;
    }
};


