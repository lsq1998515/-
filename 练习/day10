/*
题目描述
对于一个给定的井字棋棋盘，请设计一个高效算法判断当前玩家是否获胜。

给定一个二维数组board，代表当前棋盘，其中元素为1的代表是当前玩家的棋子，为0表示没有棋子，为-1代表是对方玩家的棋子。

测试样例：
[[1,0,1],[1,-1,-1],[1,-1,0]]
返回：true
*/


class Board {
public:
	bool checkWon(vector<vector<int> > board) {
		// write code here
		//两个对角线
		if(board[0][0]+board[1][1]+board[2][2] == 3)
			return true;
		if(board[2][0]+board[1][1]+board[0][2] == 3)
			return true;
		//普通每行每列检查
		for(int i = 0; i < 3; i++)
		{
			if(board[i][0]+board[i][1]+board[i][2] == 3)
				return true;
			if(board[0][i]+board[1][i]+board[2][i] == 3)
				return true;
		}
		return false;
	}
};
/*
【解题思路】：
井字棋有四种情况表示当前玩家获胜，1代表当前玩家棋子
1. 行全为1， 即行的和为3
2. 列全为1， 列的和为3
3. 主对角全为1， 对角和为3
4. 副对角全为1， 对角和为3
5. 如果扩展为N*N的话，判断和是否等于N，下面代码适用任何情况
*/

class Board {
public:
bool checkWon(vector<vector<int> > board) {
int row = board.size();
//检查每一行的和是是否等于row
int i,j,sum;
for(i=0;i<row;i++)
{
sum = 0;
for(j=0;j<row;j++)
{
sum += board[i][j];
}
if(sum==row)
return true;
}
//检查每一列的和是是否等于row
for(i=0;i<row;i++)
{
sum = 0;
for(j=0;j<row;j++)
{
sum += board[j][i];
}
if(sum==row)
return true;
}
//检查主对角线的和是是否等于row
sum = 0;
for(i=0;i<row;i++)
{
sum += board[i][i];
}
if(sum==row)
return true;
//检查副对角线的和是是否等于row
sum = 0;
for(i=0;i<row;i++)
{
sum += board[i][row-i-1];
}
if(sum==row)
return true;
return false;
}
};

/*
题目描述
密码按如下规则进行计分，并根据不同的得分为密码进行安全等级划分。

       一、密码长度:

       5 分: 小于等于4 个字符

       10 分: 5 到7 字符

       25 分: 大于等于8 个字符

       二、字母:

       0 分: 没有字母

       10 分: 全都是小（大）写字母

       20 分: 大小写混合字母

       三、数字:

       0 分: 没有数字

       10 分: 1 个数字

       20 分: 大于1 个数字

       四、符号:

       0 分: 没有符号

       10 分: 1 个符号

       25 分: 大于1 个符号

       五、奖励:

       2 分: 字母和数字

       3 分: 字母、数字和符号

       5 分: 大小写字母、数字和符号

       最后的评分标准:

       >= 90: 非常安全

       >= 80: 安全（Secure）

       >= 70: 非常强

       >= 60: 强（Strong）

       >= 50: 一般（Average）

       >= 25: 弱（Weak）

       >= 0:  非常弱

 

对应输出为：

  VERY_WEAK,

   WEAK,    

   AVERAGE,    

   STRONG,     

   VERY_STRONG,

   SECURE,     

   VERY_SECURE 



       请根据输入的密码字符串，进行安全评定。

       注：

       字母：a-z, A-Z

       数字：-9

       符号包含如下： (ASCII码表可以在UltraEdit的菜单view->ASCII Table查看)

       !"#$%&'()*+,-./     (ASCII码：x21~0x2F)

       :;<=>?@             (ASCII<=><=><=><=><=>码：x3A~0x40)

       [\]^_`              (ASCII码：x5B~0x60)

  {|}~                (ASCII码：x7B~0x7E)

接口描述：

 

 Input Param 
      String pPasswordStr:    密码，以字符串方式存放。

 Return Value
   根据规则评定的安全等级。

 

 
 public static Safelevel GetPwdSecurityLevel(String pPasswordStr)
 {
     /*在这里实现功能*/
  return null;
 }

 

 

 

输入描述:
输入一个string的密码

输出描述:
输出密码等级

示例1
输入

38$@NoNoNo
输出

VERY_SECURE
*/

//密码强度等级
#include<iostream>
#include<string>
using namespace std;
//长度评分
int getSize(string& password)
{
	if (password.size() <= 4)
		return 5;
	else if (password.size() >= 8)
		return 25;
	else
		return 10;
}
//字母评分
int getWord(string& password)
{
	int bigWord = 0;//大写
	int smallWord = 0;//小写
	for (int i = 0; i < password.size(); i++)
	{
		if (password[i] >= 'A' && password[i] <= 'Z')
			bigWord++;
		else if (password[i] >= 'a' && password[i] <= 'z')
			smallWord++;
	}
	//不含字母
	if (smallWord + bigWord == 0)
		return 0;
	//纯大写or纯小写
	else if ((bigWord == password.size()) || (smallWord == password.size()))
		return 10;
	//大小写都有
	else if (bigWord > 0 && smallWord > 0)
		return 20;
	return 0;
}
//数字评分
int getNum(string& password)
{
	int count = 0;
	for (int i = 0; i < password.size(); i++)
	{
		if (password[i] >= '0'  && password[i] <= '9')
			count++;
	}
	if (count == 1)
		return 10;
	else if (count == 0)
		return 0;
	else
		return 20;
}

//符号评分
int getOther(string& password)
{
	int count = 0;
	for (int i = 0; i < password.size(); i++)
	{
		//非字母,非数字即就是符号
		if (!(password[i] >= '0' &&  password[i] <= '9') && !(password[i] >= 'a'  && password[i] <= 'z') && !(password[i] >= 'A'  && password[i] <= 'Z'))
			count++;
	}
	if (count == 0)
		return 0;
	else if (count == 1)
		return 10;
	else
		return 25;
}

int main()
{
	string password;
	int sum1 = 0;//保存长度的分数
	int sum2 = 0;//保存字母的分数
	int sum3 = 0;//保存数字的分数
	int sum4 = 0;//保存字符的分数
	int sum5 = 0;//保存奖励分
	int Sum = 0;//总分数
	while (getline(cin, password))
	{
		sum1 = getSize(password);
		sum2 = getWord(password);//字母
		sum3 = getNum(password);//数字
		sum4 = getOther(password);//符号
		if (sum2 > 0 && sum3 > 0)
		{
			if (sum4 > 0)
			{
				if (sum2 == 20)
					sum5 = 5;
				else
					sum5 = 3;
			}
			else
				sum5 = 2;
		}

		Sum = sum1 + sum2 + sum3 + sum4 + sum5;

		if (Sum >= 90)
		{
			cout << "VERY_SECURE" << endl;
		}
		else if (Sum >= 80)
		{
			cout << "SECURE" << endl;
		}
		else if (Sum >= 70)
		{
			cout << "VERY_STRONG" << endl;
		}
		else if (Sum >= 60)
		{
			cout << "STRONG" << endl;
		}
		else if (Sum >= 50)
		{
			cout << "AVERAGE" << endl;
		}
		else if (Sum >= 25)
		{
			cout << "WEAK" << endl;
		}
		else
			cout << "VERY_WEAK" << endl;
	}
	return 0;
}
