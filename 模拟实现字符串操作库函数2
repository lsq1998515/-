//5.实现strchr(查找字符出现位置)
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
char *my_strchr(const char *sorc, char dest)
{
	char *m = NULL;
	while (*sorc != NULL)
	{
		if (*sorc == dest)
		{
			return (char *)sorc;
		}
		*sorc++;
	}
	return NULL;
}

int main()

{
	char *a = "abcdefgh";
	char  b = 'e';
	char *c = my_strchr(a, b);
	printf("%s\n", c);
	system("pause");
}
//6.实现strcmp(字符串比较)
#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
int my_strcmp(const char* arr1,const char* arr2)
{
	assert(arr1 != NULL && arr2 != NULL);
	while (*arr1 == *arr2)
	{
		if (*arr1 =='\0')
		{
			return 0;
		}
		arr1++;
		arr2++;
	}
	if(*arr1 > *arr2)
	{
		return 1;
	}
	else
		return -1;
}
int main()
{
	char *arr1 = "abcdef";
	char *arr2 = "abcdg";
	int tem = my_strcmp(arr1, arr2);//1: arr1大 返回1    2: arr2大 返回-1  3: 相等  返回0
	printf("%d\n", tem);
	if (tem==1)
	{
		printf("arr1>arr2");
	}
	else if (tem==-1)
	{
		printf("arr1<arr2");
	}
	else if (tem==0)
	{
		printf("arr1=arr2");
	}
	system("pause");
	return 0;
}
//7.实现memcpy(复制值,位置不能重复)
 #define _CRT_SECURE_NO_WARNINGS 1
 #include<stdio.h>
 #include<stdlib.h>
 #include<assert.h>
 void* my_memcmp(const void * ptr1, const void * ptr2, size_t num)
 {
 	char* ret = ptr1;
 	assert(ptr1 != NULL && ptr2 != NULL);
 	while (num--)
 	{
 		*(char*)ptr1 = *(char*)ptr2;
		((char*)ptr1)++;//ptr1 = (char *)ptr1 + 1;	
		((char*)ptr2)++;//ptr2 = (char *)ptr2 + 1;
 	}
 	return ret;
 }
 int main()
 {
 	char arr1[30] = "hello";
 	char arr2[10] = "goodboy";
 	char* tem=my_memcmp(arr1+1, arr2, 2);
 	printf("%s\n", tem);
 	system("pause");
 	return 0;
 }

//8.实现memmove(复制值,允许位置重复)
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include <stdlib.h>
void * my_memmove(void * dest, const void * src, size_t num)
{
	char *ret = dest;
	//正常情况下 从前往后逐个拷贝
	if (dest<=src)
	{
		while (num--)
		{
			*(char*)dest = *(char*)src;
			((char*)dest)++;
			((char*)src)++;
		}
		return  ret;
	}
	//当出现内存覆盖时 从后向前拷贝
	else
	{
		while (num--)
		{
			*((char*)dest+num) = *((char*)src );
			((char*)dest)++;
			((char*)src)++;
		}
	}

}
int main()
{
	char arr[10] = "abcdefg";
	char arr0[10] = "abcdefg";
	char arr1[10] = { 0 };
	my_memmove(arr + 2, arr, 4);
	printf("内存覆盖情况：%s\n", arr + 2);
	my_memmove(arr1, arr0, 4);
	printf("正常情况：%s\n", arr1);
	system("pause");
	return 0;
}
