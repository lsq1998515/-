/*给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。
不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。
元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。*/
#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <stdlib.h>
int removeElement(int* nums, int numsSize, int val){
	int i = 0; 
	int j = 0;
	for (j = 0; j < numsSize;j++)
	{
		if (nums[j]!=val)
		{
			nums[i] = nums[j];
			i++;
		}
	}
	return i;
}
int main()
{
	int nums[] = { 1 };
	int numsSize = sizeof(nums)/sizeof(nums[0]);
	int sz=removeElement(nums, numsSize, 1);
	int i = 0;
	for (i = 0; i < sz;i++)
	{
		printf("%d", nums[i]);
	}
	system("pause");
	return 0;
}


#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <stdlib.h>
//有序数组求和为sum的两个数下标
void sum1(int*arr, int len, int *num1, int *num2,int key)
{
	int left = 0;
	int right = len - 1;

	while (left<right)
	{
		if (arr[left]+arr[right]>key)
		{
			right--;
		}
		else if (arr[left] + arr[right] < key)
		{
			left++;
		}
		else
		{
			*num1 = left;
			*num2 = right;
			break;
		}
	}
}

int main()
{
	int arr[] = { 1, 2, 3, 4, 5, 6,8 };
	int len = sizeof(arr) / sizeof(arr[0]);
	int num1 = -1;
	int num2 = -1;
	sum1(arr, len,&num1,&num2,8);
	printf("%d %d", num1, num2);
	system("pause");
	return 0;
}

//模拟实现pow(x,y)函数
#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include<stdlib.h>
int mypow1(int x, int y)
{
	if (y > 0)
	{
		return mypow1(x, y - 1)*x;
	}
	else
		return 1;
}

int mypow2(int x, int y)
{
	int result = 0;
	int tmp = 0;
	if (y == 0)
	{
		return 1;
	}
	tmp = mypow2(x, y / 2);
	//当y是偶数时
	if ((y & 1) == 0)
	{
		result = tmp * tmp;
	}
	//当y是奇数时
	else
	{
		result = x * tmp * tmp;
	}
	return result;
}
int main()
{
	int x = 2;
	int y = 10;
	printf("%d ", mypow1(x, y));
	printf("%d ", mypow2(x, y));
	system("pause");
	return 0;
}


